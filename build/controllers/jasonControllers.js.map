{"version":3,"sources":["../../backend/controllers/jasonControllers.js"],"names":["Applicant","mongoose","model","ApplicantSchema","getAllApplicants","find","allApplicants","Error","getApplicantWithID","id","findById","exec","applicant","console","error","findApplicantByName","name","findOne","message","addNewApplicant","age","height","weight","sport","alreadyExists","newApplicant","save","result"],"mappings":"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","file":"jasonControllers.js","sourcesContent":["import mongoose from \"mongoose\";\r\nimport { ApplicantSchema } from \"../models/jasonModel\";\r\nimport \"babel-polyfill\";\r\n\r\nconst Applicant = mongoose.model(\"Applicant\", ApplicantSchema);\r\n\r\nexport const getAllApplicants = async () => {\r\n    try {\r\n        const allApplicants = await Applicant.find({});\r\n        if (!allApplicants) {\r\n            throw new Error(\"Impossible\");\r\n        } else {\r\n            return allApplicants;\r\n        }\r\n    } catch (err) {\r\n        return err;\r\n    }\r\n};\r\n\r\nexport const getApplicantWithID = async (id) => {\r\n    try {\r\n        const applicant = await Applicant.findById(id).exec();\r\n        if (!applicant) {\r\n            throw new Error(\"Cet id ne correspond à aucun candidat\");\r\n        } else {\r\n            return applicant;\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return err;\r\n    }\r\n};\r\n\r\nexport const findApplicantByName = async (name) => {\r\n    try {\r\n        if (name) {\r\n            const applicant = await Applicant.findOne({\r\n                name: name,\r\n            }).exec();\r\n            if (!applicant) {\r\n                return false;\r\n            } else {\r\n                return applicant;\r\n            }\r\n        } else {\r\n            throw new Error(\"Il manque le nom du candidat.\");\r\n        }\r\n    } catch (err) {\r\n        console.error(err.message);\r\n        return err.message;\r\n    }\r\n};\r\n\r\nexport const addNewApplicant = async (name, age, height, weight, sport) => {\r\n    try {\r\n        const alreadyExists = await findApplicantByName(name);\r\n        if (!alreadyExists) {\r\n            let newApplicant = new Applicant({\r\n                name: name,\r\n                age: age,\r\n                height: height,\r\n                weight: weight,\r\n                sport: sport,\r\n            });\r\n            const result = await newApplicant.save();\r\n            if (!result) {\r\n                throw new Error(\r\n                    \"Impossible d'enregistrer ce nouvel utilisateur.\"\r\n                );\r\n            } else {\r\n                return result;\r\n            }\r\n        } else {\r\n            throw new Error(\"Cet utilisateur existe déjà.\");\r\n        }\r\n    } catch (err) {\r\n        console.error(err.message);\r\n        return err.message;\r\n    }\r\n};\r\n"]}